/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica4;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.dav.graficos.Lienzo2D;
import sm.dav.events.LienzoAdapter;
import sm.dav.events.LienzoEvent;
import sm.dav.graficos.MiShape;
import sm.image.KernelProducer;

/**
 *
 * @author daniel
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private ManejadorVentanaInterna manejador;
    private BufferedImage imgFuente;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        setSize(960, 960);
        // 2) Creamos objeto manejador
        manejador = new ManejadorVentanaInterna();
    }

    /**
     * Devuelve el lienzo asociado a un InternalFrame del Escritorio
     * @return Lienzo2D de una ventana interna
     */
    private Lienzo2D getSelectedLienzo() {
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        return vi != null ? vi.getLienzo2D() : null;
    }

    /**
     * Método que, dado un lienzo, toma los atributos de dicho lienzo y los coloca
     * en la barra de herramientas, para que esta esté siempre actualizada y en sintonía
     * con el lienzo que estamos trabajando
     * @param l Lienzo2D del que se van a tomar los atributos
     */
    private void setAtributosSelectedLienzo(Lienzo2D l) {
        if (l != null) {
            this.Alisar.setSelected(l.isAlisar());
            this.Mover.setSelected(l.isMover());
            this.Transparencia.setSelected(l.isTransparencia());
            this.Relleno.setSelected(l.isRelleno());
            this.Paleta.setBackground(l.getColor());
            this.Grosor.setValue(l.getTrazo().hashCode());
            l.setTipo(Lienzo2D.posiblesTipos.LINEA);
            this.BotonLinea.setSelected(true);
        }
    }
    
    private void setAtributosSelectedForma(MiShape forma) {
        if (forma != null) {
            this.Alisar.setSelected(forma.isAlisar());
            this.Mover.setSelected(forma.isEditar());
            this.Transparencia.setSelected(forma.isTransparencia());
            this.Relleno.setSelected(forma.isRelleno());
            this.Paleta.setBackground(forma.getColor());
            this.Grosor.setValue(forma.getTrazo().hashCode());
        }
    }
    

    // 1) Definimos clase manejadora
    /**
     * Clase manejadora para eventos de la ventana interna activa desde la ventana principal
     */
    private class ManejadorVentanaInterna extends InternalFrameAdapter {

        /**
         * Evento que toma los atributos del lienzo de la ventana interna activa y se encarga de 
         * colocar dichos valores en la barra de herramientas de la aplicación, para que esta esté actualizada
         * @param evt 
         */
        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            VentanaInterna vi = (VentanaInterna) evt.getInternalFrame();
            setAtributosSelectedLienzo(vi.getLienzo2D());
        }
    }
    
    public class MiManejadorLienzo extends LienzoAdapter{
        @Override
        public void shapeAdded(LienzoEvent evt) {
            System.out.println("Figura " + evt.getForma() + " añadida");
        }
        
        @Override
        public void shapeSelected(LienzoEvent evt) {
            setAtributosSelectedForma(evt.getForma());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TipoDibujo = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        BotonLinea = new javax.swing.JToggleButton();
        BotonRectangulo = new javax.swing.JToggleButton();
        BotonElipse = new javax.swing.JToggleButton();
        Fantasma = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        Mover = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        Paleta = new javax.swing.JButton();
        Relleno = new javax.swing.JToggleButton();
        Transparencia = new javax.swing.JToggleButton();
        Alisar = new javax.swing.JToggleButton();
        Grosor = new javax.swing.JSlider();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        Volcar = new javax.swing.JButton();
        Estado = new javax.swing.JLabel();
        escritorio = new javax.swing.JDesktopPane();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        Brillo = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        Contraste = new javax.swing.JSlider();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        Filtros = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        Cometa = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Nuevo = new javax.swing.JMenuItem();
        Abrir = new javax.swing.JMenuItem();
        Guardar = new javax.swing.JMenuItem();
        MenuImagenes = new javax.swing.JMenu();
        RescaleOp = new javax.swing.JMenuItem();
        ConvolveOp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PaintBásico");

        jToolBar1.setRollover(true);

        TipoDibujo.add(BotonLinea);
        BotonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/linea.png"))); // NOI18N
        BotonLinea.setFocusable(false);
        BotonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLineaActionPerformed(evt);
            }
        });
        jToolBar1.add(BotonLinea);

        TipoDibujo.add(BotonRectangulo);
        BotonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/rectangulo.png"))); // NOI18N
        BotonRectangulo.setFocusable(false);
        BotonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRectanguloActionPerformed(evt);
            }
        });
        jToolBar1.add(BotonRectangulo);

        TipoDibujo.add(BotonElipse);
        BotonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/elipse.png"))); // NOI18N
        BotonElipse.setFocusable(false);
        BotonElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonElipseActionPerformed(evt);
            }
        });
        jToolBar1.add(BotonElipse);

        TipoDibujo.add(Fantasma);
        Fantasma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/fantasma.png"))); // NOI18N
        Fantasma.setFocusable(false);
        Fantasma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Fantasma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Fantasma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FantasmaActionPerformed(evt);
            }
        });
        jToolBar1.add(Fantasma);
        jToolBar1.add(jSeparator1);

        TipoDibujo.add(Mover);
        Mover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/seleccion.png"))); // NOI18N
        Mover.setFocusable(false);
        Mover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Mover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Mover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoverActionPerformed(evt);
            }
        });
        jToolBar1.add(Mover);

        jPanel1.setMaximumSize(new java.awt.Dimension(40, 40));
        jPanel1.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.setLayout(new java.awt.BorderLayout());

        Paleta.setBackground(new java.awt.Color(0, 0, 0));
        Paleta.setForeground(new java.awt.Color(0, 0, 0));
        Paleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaletaActionPerformed(evt);
            }
        });
        jPanel1.add(Paleta, java.awt.BorderLayout.CENTER);

        jToolBar1.add(jPanel1);

        Relleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/rellenar.png"))); // NOI18N
        Relleno.setFocusable(false);
        Relleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Relleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Relleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RellenoActionPerformed(evt);
            }
        });
        jToolBar1.add(Relleno);

        Transparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/transparencia.png"))); // NOI18N
        Transparencia.setFocusable(false);
        Transparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Transparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Transparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransparenciaActionPerformed(evt);
            }
        });
        jToolBar1.add(Transparencia);

        Alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/alisar.png"))); // NOI18N
        Alisar.setFocusable(false);
        Alisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Alisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Alisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlisarActionPerformed(evt);
            }
        });
        jToolBar1.add(Alisar);

        Grosor.setMaximum(50);
        Grosor.setMinimum(1);
        Grosor.setValue(1);
        Grosor.setMaximumSize(new java.awt.Dimension(100, 16));
        Grosor.setPreferredSize(new java.awt.Dimension(100, 16));
        Grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GrosorStateChanged(evt);
            }
        });
        jToolBar1.add(Grosor);
        jToolBar1.add(jSeparator2);

        Volcar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/volcado.png"))); // NOI18N
        Volcar.setFocusable(false);
        Volcar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Volcar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Volcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolcarActionPerformed(evt);
            }
        });
        jToolBar1.add(Volcar);

        Estado.setText("Barra de Estado");

        jToolBar2.setRollover(true);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/brillo.png"))); // NOI18N
        jToolBar2.add(jLabel1);

        Brillo.setMaximum(255);
        Brillo.setMinimum(-255);
        Brillo.setValue(0);
        Brillo.setMaximumSize(new java.awt.Dimension(70, 16));
        Brillo.setMinimumSize(new java.awt.Dimension(15, 16));
        Brillo.setPreferredSize(new java.awt.Dimension(60, 16));
        Brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BrilloStateChanged(evt);
            }
        });
        Brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                BrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                BrilloFocusLost(evt);
            }
        });
        jToolBar2.add(Brillo);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/contraste.png"))); // NOI18N
        jToolBar2.add(jLabel2);

        Contraste.setMaximum(20);
        Contraste.setMinimum(1);
        Contraste.setValue(10);
        Contraste.setMaximumSize(new java.awt.Dimension(70, 16));
        Contraste.setMinimumSize(new java.awt.Dimension(15, 16));
        Contraste.setPreferredSize(new java.awt.Dimension(60, 16));
        Contraste.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ContrasteStateChanged(evt);
            }
        });
        Contraste.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ContrasteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ContrasteFocusLost(evt);
            }
        });
        jToolBar2.add(Contraste);
        jToolBar2.add(jSeparator3);

        Filtros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano", "Media_5x5", "Media_7x7", "Emborronamiento_Iluminado_3x3", "Emborronamiento_Iluminado_5x5" }));
        Filtros.setMaximumSize(new java.awt.Dimension(85, 32767));
        Filtros.setPreferredSize(new java.awt.Dimension(80, 25));
        Filtros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltrosActionPerformed(evt);
            }
        });
        jToolBar2.add(Filtros);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica4/cometa.png"))); // NOI18N
        jToolBar2.add(jLabel3);

        Cometa.setMaximum(30);
        Cometa.setMinimum(1);
        Cometa.setValue(1);
        Cometa.setMaximumSize(new java.awt.Dimension(70, 16));
        Cometa.setPreferredSize(new java.awt.Dimension(65, 16));
        Cometa.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CometaStateChanged(evt);
            }
        });
        Cometa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CometaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CometaFocusLost(evt);
            }
        });
        jToolBar2.add(Cometa);

        escritorio.setLayer(jToolBar2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, escritorioLayout.createSequentialGroup()
                .addGap(0, 377, Short.MAX_VALUE)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("Archivo");

        Nuevo.setText("Nuevo");
        Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoActionPerformed(evt);
            }
        });
        jMenu1.add(Nuevo);

        Abrir.setText("Abrir");
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        jMenu1.add(Abrir);

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        jMenu1.add(Guardar);

        jMenuBar1.add(jMenu1);

        MenuImagenes.setText("Imagenes");

        RescaleOp.setText("RescaleOp");
        RescaleOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RescaleOpActionPerformed(evt);
            }
        });
        MenuImagenes.add(RescaleOp);

        ConvolveOp.setText("ConvolveOp");
        ConvolveOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvolveOpActionPerformed(evt);
            }
        });
        MenuImagenes.add(ConvolveOp);

        jMenuBar1.add(MenuImagenes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
            .addComponent(Estado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(escritorio)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(escritorio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Estado, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento Action del botón que permite crear una nueva ventana interna. El método lanza un
     * diálogo para preguntar por el ancho y altura de la imagen del lienzo asociado. Si los valores son correctos, crea
     * una imagen de ese tamaño. En caso contrario,lo crea de 400x400. Además, crea la ventana interna, la enlaza con el manejador y establece
     * la imagen de fondo del lienzo
     * @param evt 
     */
    private void NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoActionPerformed
        BufferedImage img;
        JPanel panel = new JPanel();
        JTextField textField1 = new JTextField(5);
        JTextField textField2 = new JTextField(5);
        panel.add(new JLabel("Introducir Ancho:"));
        panel.add(textField1);
        panel.add(Box.createHorizontalStrut(15));
        panel.add(new JLabel("Introducir Alto:"));
        panel.add(textField2);
        int result = JOptionPane.showConfirmDialog(null, panel, "Ingrese el tamaño de la imagen",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            try {
                int valor1 = Integer.parseInt(textField1.getText());
                int valor2 = Integer.parseInt(textField2.getText());
                img = new BufferedImage(valor1, valor2, BufferedImage.TYPE_INT_RGB);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Valores no válidos, se creará tamaño por defecto.", "Error", JOptionPane.ERROR_MESSAGE);
                img = new BufferedImage(400, 400, BufferedImage.TYPE_INT_RGB);
            }
        } else {
            img = new BufferedImage(400, 400, BufferedImage.TYPE_INT_RGB);
        }

        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        setAtributosSelectedLienzo(vi.getLienzo2D());

        // 2) Enlazar generador con manejador
        vi.addInternalFrameListener(manejador);

        // Pintamos de blanco
        Graphics2D g2d = img.createGraphics();
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());
        g2d.dispose();

        vi.getLienzo2D().setImage(img);
        
        MiManejadorLienzo manejadorLienzo = new MiManejadorLienzo();
        vi.getLienzo2D().addLienzoListener(manejadorLienzo);
    }//GEN-LAST:event_NuevoActionPerformed

    private void BotonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLineaActionPerformed
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setMover(Mover.isSelected());
            lienzo.SalirModoEditar();
            lienzo.setTipo(Lienzo2D.posiblesTipos.LINEA);
            Estado.setText("Línea");
        }
    }//GEN-LAST:event_BotonLineaActionPerformed

    private void BotonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRectanguloActionPerformed
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setMover(Mover.isSelected());
            lienzo.SalirModoEditar();
            lienzo.setTipo(Lienzo2D.posiblesTipos.RECTANGULO);
            Estado.setText("Rectángulo");
        }
    }//GEN-LAST:event_BotonRectanguloActionPerformed

    private void BotonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonElipseActionPerformed
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setMover(Mover.isSelected());
            lienzo.SalirModoEditar();
            lienzo.setTipo(Lienzo2D.posiblesTipos.ELIPSE);
            Estado.setText("Elipse");
        }
    }//GEN-LAST:event_BotonElipseActionPerformed

    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png", "gif", "bmp");
        fileChooser.setFileFilter(filter);
        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            try {
                File f = fileChooser.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo2D().setImage(img);
                vi.addInternalFrameListener(manejador);
                MiManejadorLienzo manejadorLienzo = new MiManejadorLienzo();
                vi.getLienzo2D().addLienzoListener(manejadorLienzo);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al abrir la imagen: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_AbrirActionPerformed

    private String getFileExtension(File file) {
        String fileName = file.getName();
        int dotIndex = fileName.lastIndexOf('.');
        if (dotIndex > 0 && dotIndex < fileName.length() - 1) {
            return fileName.substring(dotIndex + 1).toLowerCase();
        }
        return "";
    }

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getPaintedImage();
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png", "gif", "bmp");
                dlg.setFileFilter(filter);
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        String formato = getFileExtension(f);
                        if (formato == null || formato.isEmpty()) {
                            formato = "jpg";
                            f = new File(f.getAbsolutePath() + ".jpg");
                        }
                        ImageIO.write(img, formato, f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Error al guardar la imagen: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        ex.printStackTrace();
                    }
                }
            }
        }
    }//GEN-LAST:event_GuardarActionPerformed

    private void FantasmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FantasmaActionPerformed
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipo(Lienzo2D.posiblesTipos.FANTASMA);
            lienzo.SalirModoEditar();
            lienzo.setMover(Mover.isSelected());
            Estado.setText("Fantasma");
        }
    }//GEN-LAST:event_FantasmaActionPerformed

    private void RellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RellenoActionPerformed
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setRelleno(Relleno.isSelected());
        }
    }//GEN-LAST:event_RellenoActionPerformed

    private void MoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoverActionPerformed
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setMover(Mover.isSelected());
        }
    }//GEN-LAST:event_MoverActionPerformed

    private void TransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransparenciaActionPerformed
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTransparencia(Transparencia.isSelected());
            // lienzo.repaint();
        }
    }//GEN-LAST:event_TransparenciaActionPerformed

    private void AlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlisarActionPerformed
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setAlisar(Alisar.isSelected());
            // lienzo.repaint();
        }
    }//GEN-LAST:event_AlisarActionPerformed

    private void GrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GrosorStateChanged
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTrazo((int) Grosor.getValue());
            // lienzo.repaint();
        }
    }//GEN-LAST:event_GrosorStateChanged

    private void PaletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaletaActionPerformed
        Color color = JColorChooser.showDialog(this, "Elije un color", Color.RED);
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setColor(color);
            Paleta.setBackground(color);
        }

    }//GEN-LAST:event_PaletaActionPerformed

    private void VolcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolcarActionPerformed
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.VolcarSeleccion();
        }
    }//GEN-LAST:event_VolcarActionPerformed

    private void RescaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RescaleOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.2F, 0.0F, null);
                    rop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_RescaleOpActionPerformed

    private void ConvolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvolveOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ConvolveOpActionPerformed

    private void BrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BrilloFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_BrilloFocusGained

    private void BrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BrilloFocusLost
        imgFuente = null;
    }//GEN-LAST:event_BrilloFocusLost

    private void BrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BrilloStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            RescaleOp rop = new RescaleOp(1.0F, Brillo.getValue(), null);
            rop.filter(imgFuente, vi.getLienzo2D().getImage());
            vi.getLienzo2D().repaint();
        }
    }//GEN-LAST:event_BrilloStateChanged

    private void ContrasteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ContrasteFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_ContrasteFocusGained

    private void ContrasteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ContrasteFocusLost
        imgFuente = null;
    }//GEN-LAST:event_ContrasteFocusLost

    private void ContrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ContrasteStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            RescaleOp rop = new RescaleOp(Contraste.getValue()/10.0F, 0.0F, null);
            rop.filter(imgFuente, vi.getLienzo2D().getImage());
            vi.getLienzo2D().repaint();
        }
    }//GEN-LAST:event_ContrasteStateChanged

    private void FiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltrosActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            Kernel k = getKernel(Filtros.getSelectedIndex());
            if (img != null && k != null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_FiltrosActionPerformed

    private void CometaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CometaFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_CometaFocusGained

    private void CometaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CometaFocusLost
        imgFuente = null;
    }//GEN-LAST:event_CometaFocusLost

    private void CometaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CometaStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            int n = Cometa.getValue() % 2 == 0 ? Cometa.getValue() + -1 : Cometa.getValue();
            float filtro[] = getFiltroCometa(n);
            Kernel k = new Kernel(n, n, filtro);
            ConvolveOp cop = new ConvolveOp(k);
            BufferedImage imgdest = cop.filter(imgFuente, null);
            vi.getLienzo2D().setImage(imgdest);
            vi.getLienzo2D().repaint();
            
        }
    }//GEN-LAST:event_CometaStateChanged

    private Kernel getKernel(int seleccion) {
        Kernel k = null;
        float filtro[] = null;
        switch(seleccion) {
            case 0 -> k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
            case 1 -> k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
            case 2 -> k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
            case 3 -> k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
            case 4 -> k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
            case 5 -> {
                filtro = crearFiltroMedia(5);
                k = new Kernel(5,5,filtro);
            }
            case 6 -> {
                filtro = crearFiltroMedia(7);
                k = new Kernel(7,7,filtro);
            }
            case 7 -> {
                filtro = getEmborronamientoIluminado(3);
                k = new Kernel(3,3,filtro);
            }
            case 8 -> {
                filtro = getEmborronamientoIluminado(5);
                k = new Kernel(5,5,filtro);
            }
        }
        
        return k;
    }
    
    private float[] crearFiltroMedia(int n) {
        float[] filtro = new float[n*n];
        float valor = 1.0F/(n*n);
        
        for(int i=0; i<n*n; i++) {
            filtro[i] = valor;
        }
        
        return filtro;
    }
    
    private float[] getFiltroCometa(int n) {
        float [] filtro = new float[n*n];
        int medio = n/2;
        float suma = 0.0f;
        int z = 0;
        
        if(n == 1){
            filtro[0] = 1.0f;
            return filtro;
        } 
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i == medio && j >= medio) { // Está a la derecha en la misma línea del pixeñ
                    filtro[z] = 1.0f/j;
                } else {
                    filtro[z] = 0.0f;
                }
                suma += filtro[z];
                z++;
            }
        }
        
        System.out.print("Filtro size" +n +"->[");
        for(int i=0; i<n*n; i++){
            filtro[i] /= suma;
            System.out.print(filtro[i] + ", ");
        }
        System.out.print("] \n");
        
        return filtro;
    }
    
    /**
     * Dado que todos los valores de la máscara son iguales, se produce por un lado, un suavizado
     * como en la media, pero, al ser 2 el numerador en lugar de 1, implpica que los pesos suman 2, por lo que, 
     * al realizar la convolución, la suma ponderada de los pixeles vecinos será mayor que el valor
     * original del pixel que estamos procesando, resultando en un aumento del valor del pixel. Como esto ocurre
     * para cada pixel procesado, conducirá a un aumento del brillo de la imagen.
     * @param n Tamaño de la máscara (La máscara será nxn)
     * @return Devuelve el filtro de un emborronamiento iluminado
     */
    private float[] getEmborronamientoIluminado(int n) {
        float [] filtro = new float[n*n];
        for(int i=0; i<n*n; i++){
            filtro[i] = 2.0F/(n*n);
        }
        return filtro;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Abrir;
    private javax.swing.JToggleButton Alisar;
    private javax.swing.JToggleButton BotonElipse;
    private javax.swing.JToggleButton BotonLinea;
    private javax.swing.JToggleButton BotonRectangulo;
    private javax.swing.JSlider Brillo;
    private javax.swing.JSlider Cometa;
    private javax.swing.JSlider Contraste;
    private javax.swing.JMenuItem ConvolveOp;
    private javax.swing.JLabel Estado;
    private javax.swing.JToggleButton Fantasma;
    private javax.swing.JComboBox<String> Filtros;
    private javax.swing.JSlider Grosor;
    private javax.swing.JMenuItem Guardar;
    private javax.swing.JMenu MenuImagenes;
    private javax.swing.JToggleButton Mover;
    private javax.swing.JMenuItem Nuevo;
    private javax.swing.JButton Paleta;
    private javax.swing.JToggleButton Relleno;
    private javax.swing.JMenuItem RescaleOp;
    private javax.swing.ButtonGroup TipoDibujo;
    private javax.swing.JToggleButton Transparencia;
    private javax.swing.JButton Volcar;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    // End of variables declaration//GEN-END:variables
}
