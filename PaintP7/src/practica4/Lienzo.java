/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package practica4;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import practica4.MiLinea;
import practica4.MiElipse;
        
/**
 *
 * @author daniel
 */
public class Lienzo extends javax.swing.JPanel {
    private List<Shape> vShape = new ArrayList();
    private Shape forma = new Line2D.Float(0,0,0,0);
    private Color color = Color.black;
    private boolean relleno = false;
    private boolean mover = false;
    public enum posiblesTipos {
        LINEA,
        RECTANGULO,
        ELIPSE
    };
    private posiblesTipos tipo = posiblesTipos.LINEA;
    private Point2D pPressed = new Point2D.Float(0, 0);
    private boolean transparencia = false;
    private boolean alisar = false;
    RenderingHints render;
    Composite comp;
    Stroke trazo = new BasicStroke(1f);
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        g2d.setPaint(color);
        // g2d.setStroke(new BasicStroke(2f));
        
        if(alisar){
            render = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        } else {
            render = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        }
        g2d.setRenderingHints(render);
        
        if(transparencia){
            comp = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
        }else{
            comp = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f);
        }
        g2d.setComposite(comp);
        
        g2d.setStroke(trazo);
        
        for(Shape s:vShape){
            if(relleno)
                g2d.fill(s);
            g2d.draw(s);
        }
    }
    
    private Shape figuraSeleccionada(Point2D p){
        for(Shape s:vShape)
            if(s.contains(p)) return s;
        return null;
    }
    
    public void limpiarPanel() {
        vShape.clear();
        this.repaint();
    }

    public boolean isMover() {
        return mover;
    }

    public void setMover(boolean mover) {
        this.mover = mover;
    }

    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public boolean isRelleno() {
        return relleno;
    }

    public void setRelleno(boolean relleno) {
        this.relleno = relleno;
    }

    public posiblesTipos getTipo() {
        return tipo;
    }

    public void setTipo(posiblesTipos tipo) {
        this.tipo = tipo;
    }

    public boolean isTransparencia() {
        return transparencia;
    }

    public void setTransparencia(boolean transparencia) {
        this.transparencia = transparencia;
    }

    public boolean isAlisar() {
        return alisar;
    }

    public void setAlisar(boolean alisar) {
        this.alisar = alisar;
    }

    public Stroke getTrazo() {
        return trazo;
    }

    public void setTrazo(int grosor) {
        this.trazo = new BasicStroke((float) grosor);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if(mover){
            forma = figuraSeleccionada(evt.getPoint());
        } else {
            switch (tipo){
            case LINEA:
                // forma = new Line2D.Float(evt.getPoint(),evt.getPoint());
                forma = new MiLinea(evt.getPoint(), evt.getPoint());
                break;
            case ELIPSE:
                // forma = new Ellipse2D.Float(evt.getPoint().x,evt.getPoint().y,0,0);
                forma = new MiElipse(evt.getPoint(), 0, 0);
                pPressed = evt.getPoint();
                break;
            case RECTANGULO:
                forma = new Rectangle(evt.getPoint());
                pPressed = evt.getPoint();
                break;
            }
            vShape.add(forma);
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(mover){
            if(forma != null && forma instanceof Rectangle){
                ((Rectangle) forma).setLocation(evt.getPoint());
            }
            if(forma != null && forma instanceof MiLinea){
                ((MiLinea) forma).setLocation(evt.getPoint());
            }
            if(forma != null && forma instanceof MiElipse){
                ((MiElipse) forma).setLocation(evt.getPoint());
            }
        } else {
            if(forma instanceof MiLinea)
                ((MiLinea)forma).setLine(((MiLinea)forma).getP1(), evt.getPoint());
            if(forma instanceof MiElipse)
                ((MiElipse)forma).setFrameFromDiagonal(pPressed.getX(),pPressed.getY(),evt.getPoint().x,evt.getPoint().y);
            if(forma instanceof Rectangle2D)
                ((Rectangle2D)forma).setFrameFromDiagonal(pPressed.getX(),pPressed.getY(),evt.getPoint().x,evt.getPoint().y);
        }
        this.repaint();
    }//GEN-LAST:event_formMouseDragged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
